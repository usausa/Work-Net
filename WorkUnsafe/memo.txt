■Unsafe

// AsPointer
AsPointer<T>(T)	マネージド ポインターをアンマネージド ポインターに変換します。
    // ldarg.0
    // conv.u
    // ret

// SizeOf
SizeOf<T>()	指定した型パラメーターの値のサイズを返します。
    return sizeof(T);

// As
As<T>(Object)	指定したオブジェクトを指定した型にキャストします。
As<TFrom,TTo>(TFrom)	指定したマネージド ポインターを、 型の値への新しいマネージド ポインターとして再解釈します TTo。
    // ldarg.0
    // ret

// Add
Add<T>(T, Int32)	指定されたマネージド ポインターにオフセットを追加します。
    return ref AddByteOffset(ref source, (IntPtr)((nint)elementOffset * (nint)sizeof(T)));
Add<T>(T, IntPtr)	指定されたマネージド ポインターに要素オフセットを追加します。
    return (byte*)source + (elementOffset * (nint)sizeof(T));
Add<T>(T, UIntPtr)	指定されたマネージド ポインターに要素オフセットを追加します。
    return ref AddByteOffset(ref source, (nuint)(elementOffset * (nuint)sizeof(T)));
Add<T>(Void*, Int32)	指定されたアンマネージ ポインターに要素オフセットを追加します。
    return ref AddByteOffset(ref source, (IntPtr)((nint)elementOffset * (nint)sizeof(T)));

// AddByteOffset
AddByteOffset<T>(T, IntPtr)	指定されたマネージド ポインターにバイト オフセットを追加します。
AddByteOffset<T>(T, UIntPtr)	指定されたマネージド ポインターにバイト オフセットを追加します。
    // ldarg .0
    // ldarg .1
    // add
    // ret

// AreSame
AreSame<T>(T, T)	指定したマネージド ポインターが同じ場所を指しているかどうかを判断します。

    // ldarg.0
    // ldarg.1
    // ceq
    // ret

// BitCast
BitCast<TFrom,TTo>(TFrom)	型の指定された値を 型 TFrom の値として再解釈します TTo。
    return ReadUnaligned<TTo>(ref As<TFrom, byte>(ref source));

// Copy
Copy<T>(T, Void*)	指定した場所に T 型の値をコピーします。
Copy<T>(Void*, T)	指定した場所に T 型の値をコピーします。
    // ldarg .0
    // ldarg .1
    // ldobj !!T
    // stobj !!T
    // ret


// CopyBlock
CopyBlock(Byte, Byte, UInt32)	コピー元のアドレスからコピー先のアドレスにバイトをコピーします。
CopyBlock(Void*, Void*, UInt32)	コピー元のアドレスからコピー先のアドレスにバイトをコピーします。
    // ldarg .0
    // ldarg .1
    // ldarg .2
    // cpblk
CopyBlockUnaligned(Byte, Byte, UInt32)	アーキテクチャに依存するアドレスの配置を考慮せずに、コピー元アドレスからコピー先アドレスにバイトをコピーします。
CopyBlockUnaligned(Void*, Void*, UInt32)	アーキテクチャに依存するアドレスの配置を考慮せずに、コピー元アドレスからコピー先アドレスにバイトをコピーします。
    // ret
    // ldarg .0
    // ldarg .1
    // ldarg .2
    // unaligned. 0x1
    // cpblk
    // ret

// IsAddress
IsAddressGreaterThan<T>(T, T)	指定したマネージド ポインターが、指定した別のマネージド ポインターより大きいかどうかを示す値を返します。
    // ldarg.0
    // ldarg.1
    // cgt.un
    // ret
IsAddressLessThan<T>(T, T)	指定したマネージド ポインターが、指定した別のマネージド ポインターより小さいかどうかを示す値を返します。
    // ldarg.0
    // ldarg.1
    // clt.un
    // ret

// InitBlock
InitBlock(Byte, Byte, UInt32)	指定した場所のメモリ ブロックを指定した初期値で初期化します。
InitBlock(Void*, Byte, UInt32)	指定した場所のメモリ ブロックを指定した初期値で初期化します。
    // ldarg .0
    // ldarg .1
    // ldarg .2
    // initblk
    // ret
InitBlockUnaligned(Byte, Byte, UInt32)	アーキテクチャに依存するアドレスの配置を考慮せずに、指定した場所のメモリ ブロックを指定した初期値で初期化します。
InitBlockUnaligned(Void*, Byte, UInt32)	アーキテクチャに依存するアドレスの配置を考慮せずに、指定した場所のメモリ ブロックを指定した初期値で初期化します。
    // ldarg .0
    // ldarg .1
    // ldarg .2
    // unaligned. 0x1
    // initblk
    // ret

// Read
Read<T>(Void*)	指定した場所から T 型の値を読み取ります。
    return *(T*)source;
ReadUnaligned<T>(Byte)	ソース アドレスのアーキテクチャに依存する配置を想定せずに、指定されたアドレスから型 T の値を読み取ります。
ReadUnaligned<T>(Void*)	ソース アドレスのアーキテクチャに依存する配置を想定せずに、指定された場所から型 T の値を読み取ります。
    return As<byte, T>(ref Unsafe.AsRef(in source));

// Write
Write<T>(Void*, T)	指定した場所に T 型の値を書き込みます。
    *(T*)destination = value;
WriteUnaligned<T>(Byte, T)	宛先アドレスのアーキテクチャに依存する配置を想定せずに、指定された場所に型 T の値を書き込みます。
WriteUnaligned<T>(Void*, T)	宛先アドレスのアーキテクチャに依存する配置を想定せずに、指定された場所に型 T の値を書き込みます。
    As<byte, T>(ref destination) = value;

// AsRef
AsRef<T>(T)	指定された読み取り専用参照を変更可能な参照として再解釈します。
    return ref *(T*)source;
AsRef<T>(Void*)	アンマネージ ポインターを 型の値にマネージド ポインターに変換します T。
    //ldarg .0
    //ret

// ByteOffset
ByteOffset<T>([AllowNull] ref readonly T origin, [AllowNull] ref readonly T target)
    // ldarg .1
    // ldarg .0
    // sub
    // ret

// NullRef
NullRef<T>()	型の値への null マネージド ポインターを返します T。
    return ref AsRef<T>(null);
    // ldc.i4.0
    // conv.u
    // ret

// IsNullRef
IsNullRef<T>(T)	型 T の値への特定のマネージド ポインターが null 参照であるかどうかを判断します。
    return AsPointer(ref Unsafe.AsRef(in source)) == null;
    // ldarg.0
    // ldc.i4.0
    // conv.u
    // ceq
    // ret

// SkipInit
SkipInit<T>(T)	指定された参照の明確な割り当てルールをバイパスします。
    // ret

// Subtract
Subtract<T>(T, Int32)	指定されたマネージド ポインターからオフセットを減算します。
    return ref SubtractByteOffset(ref source, (IntPtr)(elementOffset * (nint)sizeof(T)));
Subtract<T>(T, IntPtr)	指定されたマネージド ポインターから要素オフセットを減算します。
    return (byte*)source - (elementOffset * (nint)sizeof(T));
Subtract<T>(T, UIntPtr)	指定されたマネージド ポインターから要素オフセットを減算します。
    return ref SubtractByteOffset(ref source, (IntPtr)((nint)elementOffset * (nint)sizeof(T)));
Subtract<T>(Void*, Int32)	指定されたアンマネージ ポインターから要素オフセットを減算します。
    return ref SubtractByteOffset(ref source, (nuint)(elementOffset * (nuint)sizeof(T)));
SubtractByteOffset<T>(T, IntPtr)	指定されたマネージド ポインターからバイト オフセットを減算します。
    // ldarg .0
    // ldarg .1
    // sizeof !!T
    // mul
    // sub
    // ret
SubtractByteOffset<T>(T, UIntPtr)	指定されたマネージド ポインターからバイト オフセットを減算します。
    // ldarg .0
    // ldarg .1
    // sub
    // ret

// Unbox
Unbox<T>(Object)	ボックス化された値に mutable ref を返します。
    // ldarg .0
    // unbox !!T
    // ret

■MemoryMarshal

- AsBytes
AsBytes<T>(ReadOnlySpan<T>)	1 つのプリミティブ型 (T) の ReadOnlySpan<T> を、ReadOnlySpan<Byte> にキャストします。
AsBytes<T>(Span<T>)	1 つのプリミティブ型 (T) の Span<T> を、Span<Byte> にキャストします。
AsMemory<T>(ReadOnlyMemory<T>)	ReadOnlyMemory<T> から Memory<T> インスタンスを作成します。
    return new Span<byte>(ref Unsafe.As<T, byte>(ref GetReference(span)), checked(span.Length * sizeof(T)));

- GetReference
GetReference<T>(Span<T>)	インデックス 0 にあるスパンの要素の参照を返します。
GetReference<T>(ReadOnlySpan<T>)	インデックス 0 にある読み取り専用スパンの要素の参照を返します。
    ref span._reference;

- Cast
Cast<TFrom,TTo>(ReadOnlySpan<TFrom>)	1 つのプリミティブ型の読み取り専用スパンを、別のプリミティブ型の読み取り専用スパンにキャストします。
Cast<TFrom,TTo>(Span<TFrom>)	1 つのプリミティブ型のスパンを、別のプリミティブ型のスパンにキャストします。
    ...
    return new Span<TTo>(ref Unsafe.As<TFrom, TTo>(ref span._reference), toLength);

- CreateSpan
CreateSpan<T>(T, Int32)	定期的なマネージド オブジェクトの一部に対する新しいスパンを作成します。
CreateReadOnlySpan<T>(T, Int32)	定期的なマネージド オブジェクトの一部に対する新しい読み取り専用スパンを作成します。
    new Span<T>(ref Unsafe.AsRef(in reference), length)
CreateReadOnlySpanFromNullTerminated(Byte*)	null で終わるバイト シーケンスの新しい読み取り専用スパンを作成します。
CreateReadOnlySpanFromNullTerminated(Char*)	null で終わる文字列の新しい読み取り専用スパンを作成します。

- TryGetArray
TryGetArray<T>(ReadOnlyMemory<T>, ArraySegment<T>)	基になるメモリ バッファーから配列セグメントの取得を試みます。 戻り値は、操作の成功を示します。

- TryGetMemoryManager
TryGetMemoryManager<T,TManager>(ReadOnlyMemory<T>, TManager)	基になる読み取り専用メモリ バッファーから MemoryManager<T> の取得を試みます。
TryGetMemoryManager<T,TManager>(ReadOnlyMemory<T>, TManager, Int32, Int32)	基になる読み取り専用メモリ バッファーから、MemoryManager<T>、開始インデックス、長さの取得を試みます。

- ToEnumerable
ToEnumerable<T>(ReadOnlyMemory<T>)	指定した読み取り専用メモリ バッファーの IEnumerable<T> ビューを作成します。
    yieldしていく

- TryGetString
TryGetString(ReadOnlyMemory<Char>, String, Int32, Int32)	System.ReadOnlyMemory<Char> から基になる文字列の取得を試みます。

- Read
Read<T>(ReadOnlySpan<Byte>)	バイトの読み取り専用スパンから型 T の構造体を読み取ります。
TryRead<T>(ReadOnlySpan<Byte>, T)	バイト型の読み取り専用スパンから T 型の構造体の読み取りを試みます。
    return Unsafe.ReadUnaligned<T>(ref GetReference(source));

- Write
Write<T>(Span<Byte>, T)	バイト型のスパンに T 型の構造体を書き込みます。
TryWrite<T>(Span<Byte>, T)	バイト型のスパンに T 型の構造体の書き込みを試みます。
    Unsafe.WriteUnaligned(ref GetReference(destination), value);

- AsRef
AsRef<T>(ReadOnlySpan<Byte>)	読み取り専用スパンのバイトを、T 型の構造体への読み取り専用参照として再解釈します。
AsRef<T>(Span<Byte>)	スパンのバイトを、T 型の構造体への参照として再解釈します。
    return ref Unsafe.As<byte, T>(ref GetReference(span));

- CreateFromPinnedArray
CreateFromPinnedArray<T>(T[], Int32, Int32)	start インデックスで始まり length 個の項目で構成される、事前にピン留めされたターゲット配列の一部に対する、新しいメモリ バッファーを作成します。

- GetArrayDataReference
GetArrayDataReference(Array)	array のゼロ番目の要素への参照を返します。 配列が空の場合、ゼロ番目の要素が格納される場所への参照を返します。 そのような参照はピン留めに使用できますが、逆参照が禁止されます。
GetArrayDataReference<T>(T[])	array のゼロ番目の要素への参照を返します。 配列が空の場合、ゼロ番目の要素が格納される場所への参照を返します。 そのような参照はピン留めに使用できますが、逆参照が禁止されます。
    return ref Unsafe.AddByteOffset(ref Unsafe.As<RawData>(array).Data, (nuint)RuntimeHelpers.GetMethodTable(array)->BaseSize - (nuint)(2 * sizeof(IntPtr)));




========================================================================================================
■Reader/Writer
D:\DevSmart\WorkSerializer\Serializer-bebop-master\Runtime\C#\Runtime\BebopReader.cs(14):     public ref struct BebopReader
D:\DevSmart\WorkSerializer\Serializer-bebop-master\Runtime\C#\Runtime\BebopWriter.cs(14):     public ref struct BebopWriter


■Reader/Writer
Work\_RefHW\BedrockFramework-main\src\Bedrock.Framework\Infrastructure2\BufferWriter.cs(10):     public ref struct BufferWriter<T> where T : IBufferWriter<byte>
Work\_RefHW\BedrockFramework-main\src\Bedrock.Framework.Experimental\Infrastructure2\BufferWriter.cs(10):     public ref struct BufferWriter<T> where T : IBufferWriter<byte>


■Reader/Writer
DevSmart\_Reference\DevRoslyn\2Build\Hagar-master\src\Hagar\Buffers\Reader.cs(8):     public ref struct Reader
DevSmart\_Reference\DevRoslyn\2Build\Hagar-master\src\Hagar\Buffers\Writer.cs(8):     public ref struct Writer<TBufferWriter> where TBufferWriter : IBufferWriter<byte>


■Reader/Writer
DevSourceGen\■Roslyn\Hagar-master\src\Hagar\Buffers\Reader.cs(9):     public ref struct Reader
DevSourceGen\■Roslyn\Hagar-master\src\Hagar\Buffers\Writer.cs(9):     public ref struct Writer<TBufferWriter> where TBufferWriter : IBufferWriter<byte>


■Reader/Writer
Reference\AspNetCore\src\Shared\ServerInfrastructure\BufferWriter.cs(12):     internal ref struct BufferWriter<T> where T : IBufferWriter<byte>
Reference\Runtime\src\libraries\System.Memory\ref\System.Memory.cs(150):         public ref struct TryWriteInterpolatedStringHandler


■Reader
DevSourceGen\FixMeziantou.Analyzer\tests\Meziantou.Analyzer.Test\Rules\MakeStructMemberReadOnlyAnalyzerTests.cs(580): internal ref struct PathReader


■Writer
DevSmart\_Reference\BedrockFramework-master\src\Bedrock.Framework.Experimental\Infrastructure\BufferWriter.cs(10):     public ref struct BufferWriter<T> where T : IBufferWriter<byte>


■Enumerator
Work\_Ref1\Get-LangExt\LanguageExt.Core\Immutable Collections\Seq\SeqLoan.cs(334):         public ref struct Enumerator


■Enumerator
DevSmart\_Reference\NetFabric.Hyperlinq-main\NetFabric.Hyperlinq\Filtering\Where\Where.ReadOnlyMemory.cs(46):             public ref struct Enumerator


■Enumerator
DevSourceGen\FixMeziantou.Analyzer\src\Meziantou.Analyzer\Internals\StringExtensions.cs(39):         public ref struct LineSplitEnumerator
DevSourceGen\FixMeziantou.Analyzer\src\Meziantou.Analyzer\Internals\StringExtensions.cs(85):         public readonly ref struct LineSplitEntry
